{
  "name": "camera-vc0706",
  "version": "0.1.6",
  "description": "Library to run the camera-vc0706 Tessel module",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${CAMERA_PORT}' test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/camera-vc0706.git"
  },
  "author": {
    "name": "Technical Machine",
    "email": "team@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "directories": {
    "example": "examples"
  },
  "keywords": [
    "tessel",
    "camera",
    "technical machine",
    "vc0706",
    "image"
  ],
  "dependencies": {
    "vclib": "*",
    "sink_q": "*"
  },
  "devDependencies": {
    "jpeg-size": "~0.0.1",
    "tinytap": "~0.0.2"
  },
  "readme": "#Camera\nDriver for the camera-vc0706 Tessel camera module. The hardware documentation for this module can be found [here](https://github.com/tessel/hardware/blob/master/modules-overview.md#camera).\n\nIf you run into any issues you can ask for support on the [Camera Module Forums](http://forums.tessel.io/category/camera).\n\n###Installation\n```sh\nnpm install camera-vc0706\n```\n\n###Example\n```js\n/*********************************************\nThis camera example takes a picture. If a\ndirectory is specified with the --upload-dir\nflag, the picture is saved to that directory.\n*********************************************/\n\nvar tessel = require('tessel');\nvar camera = require('camera-vc0706').use(tessel.port['A']); \n\nvar notificationLED = tessel.led[3]; // Set up an LED to notify when we're taking a picture\n\n// Wait for the camera module to say it's ready\ncamera.on('ready', function() {\n  notificationLED.high();\n  // Take the picture\n  camera.takePicture(function(err, image) {\n    if (err) {\n      console.log('error taking image', err);\n    } else {\n      notificationLED.low();\n      // Name the image\n      var name = 'picture-' + Math.floor(Date.now()*1000) + '.jpg';\n      // Save the image\n      console.log('Picture saving as', name, '...');\n      process.sendfile(name, image);\n      console.log('done.');\n      // Turn the camera off to end the script\n      camera.disable();\n    }\n  });\n});\n\ncamera.on('error', function(err) {\n  console.error(err);\n});\n```\n\n###Properties\n&#x20;<a href=\"#api-camera-resolutions-An-object-which-maps-resolution-labels-to-their-dimensions-The-string-labels-can-be-used-to-configure-the-camera-s-resolution\" name=\"api-camera-resolutions-An-object-which-maps-resolution-labels-to-their-dimensions-The-string-labels-can-be-used-to-configure-the-camera-s-resolution\">#</a> camera<b>.resolutions</b>() An object which maps resolution labels to their dimensions. The string labels can be used to configure the camera's resolution.  \n\n\n###Methods\n&#x20;<a href=\"#api-camera-disable-Disable-UART-connection-to-camera-Closes-connection-ends-process\" name=\"api-camera-disable-Disable-UART-connection-to-camera-Closes-connection-ends-process\">#</a> camera<b>.disable</b>() Disable UART connection to camera. Closes connection & ends process.  \n\n&#x20;<a href=\"#api-camera-setCompression-compressionFactor-callback-err-Determine-the-amount-of-compression-on-each-image-Should-be-a-number-between-0-and-1-Default-is-0-2-Note-that-the-compression-is-saved-in-Flash-and-will-be-persistent-between-power-cycles\" name=\"api-camera-setCompression-compressionFactor-callback-err-Determine-the-amount-of-compression-on-each-image-Should-be-a-number-between-0-and-1-Default-is-0-2-Note-that-the-compression-is-saved-in-Flash-and-will-be-persistent-between-power-cycles\">#</a> camera<b>.setCompression</b>( compressionFactor, callback(err) ) Determine the amount of compression on each image. Should be a number between 0 and 1. Default is 0.2. Note that the compression is saved in Flash and will be persistent between power cycles.  \n\n&#x20;<a href=\"#api-camera-setResolution-resolution-callback-err-Set-the-size-of-images-Options-are-vga-640x320-qvga-320x240-or-qqvga-160x120-Default-is-vga-Note-that-the-resolution-is-saved-in-Flash-and-will-be-persistent-between-power-cycles\" name=\"api-camera-setResolution-resolution-callback-err-Set-the-size-of-images-Options-are-vga-640x320-qvga-320x240-or-qqvga-160x120-Default-is-vga-Note-that-the-resolution-is-saved-in-Flash-and-will-be-persistent-between-power-cycles\">#</a> camera<b>.setResolution</b>( resolution, callback(err) ) <i>Set</i>&nbsp; the size of images\\. Options are 'vga' (640x320), 'qvga'(320x240) <i>or</i>&nbsp; 'qqvga' (160x120 ). Default is 'vga'. Note that the resolution is saved in Flash and will be persistent between power cycles.  \n\n&#x20;<a href=\"#api-camera-takePicture-callback-err-picture-Take-a-still-picture-Returns-raw-buffer-data-which-you-can-pipe-into-a-raw-http-stream-or-save-in-memory\" name=\"api-camera-takePicture-callback-err-picture-Take-a-still-picture-Returns-raw-buffer-data-which-you-can-pipe-into-a-raw-http-stream-or-save-in-memory\">#</a> camera<b>.takePicture</b>( callback(err, picture) ) Take a still picture. Returns raw buffer data which you can pipe into a raw http stream or save in memory.  \n\n###Events\n&#x20;<a href=\"#api-camera-on-compression-callback-xyz-Emitted-when-compression-is-set\" name=\"api-camera-on-compression-callback-xyz-Emitted-when-compression-is-set\">#</a> camera<b>.on</b>( 'compression', callback(xyz) ) Emitted when compression is set.  \n\n&#x20;<a href=\"#api-camera-on-error-callback-err-Emitted-upon-error\" name=\"api-camera-on-error-callback-err-Emitted-upon-error\">#</a> camera<b>.on</b>( 'error', callback(err) ) Emitted upon error.  \n\n&#x20;<a href=\"#api-camera-on-picture-callback-picture-Emitted-when-a-photo-is-taken-Returns-buffer-of-image\" name=\"api-camera-on-picture-callback-picture-Emitted-when-a-photo-is-taken-Returns-buffer-of-image\">#</a> camera<b>.on</b>( 'picture', callback(picture) ) Emitted when a photo is taken. Returns buffer of image.  \n\n&#x20;<a href=\"#api-camera-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\" name=\"api-camera-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\">#</a> camera<b>.on</b>( 'ready', callback() ) Emitted upon first successful communication between the Tessel and the module.  \n\n&#x20;<a href=\"#api-camera-on-resolution-callback-resolution-Emitted-when-resolution-is-set\" name=\"api-camera-on-resolution-callback-resolution-Emitted-when-resolution-is-set\">#</a> camera<b>.on</b>( 'resolution', callback(resolution) ) Emitted when resolution is set.  \n\n###Configuration\nIn addition to the `camera.setCompression()` and `camera.setResolution()` methods, the camera can be configured at creation with an optional configuration object paremeter in the `.use()` method.\n```js\nvar tessel = require('tessel');\nvar camera = require('camera-vc0706').use(\n  tessel.port['A'], {\n      compression: 0.2, \n      resolution: 'vga'\n  }\n);\n```\n\n###Further Examples\n* [Camera Options](https://github.com/tessel/camera-vc0706/blob/master/examples/camera-options.js). This camera example sets image resolution and compression and then takes a picture. If a directory is specified with the --upload-dir flag, the picture is saved to that directory.\n\n\n###License\nMIT or Apache 2.0, at your option\n",
  "bugs": {
    "url": "https://github.com/tessel/camera-vc0706/issues"
  },
  "homepage": "https://github.com/tessel/camera-vc0706",
  "_id": "camera-vc0706@0.1.6",
  "dist": {
    "shasum": "4d63a618bfc5be10cda0d2d3ddfa6cfb9fb0d0b6"
  },
  "_from": "camera-vc0706@",
  "_resolved": "https://registry.npmjs.org/camera-vc0706/-/camera-vc0706-0.1.6.tgz"
}
